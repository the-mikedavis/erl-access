searchNodes=[{"doc":"Functions for accessing and altering elements within nested data structures This is a translation of Elixir's Access module and associated functions from the Elixir Kernel module. It is usually very verbose to access values within deeply nested structures in Erlang. For example, let's reach into a nested map: Data = \#{ foo =&gt; \#{ bar =&gt; baz } } , \#{ foo := Bar } = Data , \#{ bar := Baz } = Bar , Baz . %%=&gt; baz access provides functions that operate on deeply nested structures using patterns that describe paths into the structure. The above example could be rewritten like so: access : get_in ( Data , [ foo , bar ] ) . %%=&gt; baz Or to put a value into the structure: access : put_in ( Data , [ foo , bar ] , quiz ) . %%=&gt; \#{foo =&gt; \#{bar =&gt; quiz}} Access patterns are especially useful when nested data contains lists. We can filter the pattern to only access within certain lists on custom predicates with filter/1 or access all elements in a list with all/0 . Data = \#{ elements =&gt; [ \#{ a =&gt; b } , \#{ c =&gt; d } , \#{ a =&gt; e } , \#{ c =&gt; d } ] } . access : get_in ( Data , [ elements , access : filter ( fun ( M ) -&gt; is_map_key ( a , M ) end ) , a ] ) . %%=&gt; [b,e] access : put_in ( Data , [ elements , access : all ( ) , f ] , g ) . %%=&gt; \#{elements =&gt; %%=&gt; [\#{a =&gt; b,f =&gt; g}, %%=&gt; \#{c =&gt; d,f =&gt; g}, %%=&gt; \#{a =&gt; e,f =&gt; g}, %%=&gt; \#{c =&gt; d,f =&gt; g}]}","ref":"access.html","title":"access","type":"module"},{"doc":"Returns a function that accessses all elements in a list","ref":"access.html#all/0","title":"access.all/0","type":"function"},{"doc":"Returns a function that accesses the element at the given index in a tuple. Examples Data = \#{ a =&gt; { b , b , b } } , access : put_in ( Data , [ a , access : element ( 1 ) ] , e ) . %%=&gt; \#{a =&gt; {c, b, b}}","ref":"access.html#element/1","title":"access.element/1","type":"function"},{"doc":"Returns a function that accesses elements in a list which return true in the given predicate","ref":"access.html#filter/1","title":"access.filter/1","type":"function"},{"doc":"Gets the current value within a structure and returns a structure with that value updated","ref":"access.html#get_and_update_in/3","title":"access.get_and_update_in/3","type":"function"},{"doc":"Gets a value within a data structure","ref":"access.html#get_in/2","title":"access.get_in/2","type":"function"},{"doc":"Pops a value from a nested structure","ref":"access.html#pop_in/2","title":"access.pop_in/2","type":"function"},{"doc":"Puts a value into a nested structure","ref":"access.html#put_in/3","title":"access.put_in/3","type":"function"},{"doc":"Updates a value within a nested structure","ref":"access.html#update_in/3","title":"access.update_in/3","type":"function"},{"doc":"","ref":"access.html#t:access_fun/2","title":"access.access_fun/2","type":"type"},{"doc":"","ref":"access.html#t:any_container/0","title":"access.any_container/0","type":"type"},{"doc":"","ref":"access.html#t:container/0","title":"access.container/0","type":"type"},{"doc":"","ref":"access.html#t:get_and_update_fun/2","title":"access.get_and_update_fun/2","type":"type"},{"doc":"","ref":"access.html#t:get_fun/1","title":"access.get_fun/1","type":"type"},{"doc":"","ref":"access.html#t:key/0","title":"access.key/0","type":"type"},{"doc":"","ref":"access.html#t:nil_container/0","title":"access.nil_container/0","type":"type"},{"doc":"","ref":"access.html#t:pattern/0","title":"access.pattern/0","type":"type"},{"doc":"","ref":"access.html#t:structure/0","title":"access.structure/0","type":"type"}]